import org.springframework.cloud.config.server.environment.EnvironmentRepository;
import org.springframework.cloud.config.environment.Environment;
import org.springframework.cloud.config.environment.PropertySource;
import org.springframework.stereotype.Component;

import java.io.*;
import java.util.*;
import com.fasterxml.jackson.databind.ObjectMapper;

@Component
public class FallbackSavingEnvironmentRepository implements EnvironmentRepository {

    private final EnvironmentRepository delegate;
    private final ObjectMapper mapper = new ObjectMapper();
    private final File fallbackFile = new File("config-fallback.json");

    public FallbackSavingEnvironmentRepository(EnvironmentRepository delegate) {
        this.delegate = delegate;
    }

    @Override
    public Environment findOne(String application, String profile, String label) {
        Environment env;
        try {
            env = delegate.findOne(application, profile, label);

            Map<String, Object> mergedProps = new HashMap<>();
            for (PropertySource source : env.getPropertySources()) {
                if (source.getSource() instanceof Map<?, ?> map) {
                    map.forEach((k, v) -> mergedProps.put((String) k, v));
                }
            }

            saveToFallbackFile(mergedProps);

        } catch (Exception e) {
            System.err.println("Primary config failed. Attempting fallback file: " + e.getMessage());
            env = new Environment(application, profile, label);
            Map<String, Object> fallbackProps = loadFromFallbackFile();
            env.add(new PropertySource("fallback", fallbackProps));
        }

        return env;
    }

    private void saveToFallbackFile(Map<String, Object> properties) {
        try (Writer writer = new FileWriter(fallbackFile)) {
            mapper.writeValue(writer, properties);
        } catch (IOException e) {
            System.err.println("Failed to write fallback file: " + e.getMessage());
        }
    }

    private Map<String, Object> loadFromFallbackFile() {
        if (!fallbackFile.exists()) return Collections.emptyMap();

        try (Reader reader = new FileReader(fallbackFile)) {
            return mapper.readValue(reader, HashMap.class);
        } catch (IOException e) {
            System.err.println("Failed to read fallback file: " + e.getMessage());
            return Collections.emptyMap();
        }
    }
}

@Bean
@Primary
public EnvironmentRepository fallbackEnvironmentRepository(EnvironmentRepository delegate) {
    return new FallbackSavingEnvironmentRepository(delegate);
}
