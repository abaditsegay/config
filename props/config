import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.cloud.context.environment.EnvironmentChangeEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

@Component
public class ConfigPropertiesSnapshotWriter implements ApplicationListener<EnvironmentChangeEvent> {

    private final Environment environment;
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final File fallbackFile = new File("config-fallback.json");

    public ConfigPropertiesSnapshotWriter(Environment environment) {
        this.environment = environment;
    }

    @Override
    public void onApplicationEvent(EnvironmentChangeEvent event) {
        Map<String, Object> props = new HashMap<>();
        for (String propertyName : event.getKeys()) {
            props.put(propertyName, environment.getProperty(propertyName));
        }

        try (FileWriter writer = new FileWriter(fallbackFile)) {
            objectMapper.writerWithDefaultPrettyPrinter().writeValue(writer, props);
            System.out.println("✅ Config properties written to fallback file.");
        } catch (IOException e) {
            System.err.println("❌ Failed to write fallback file: " + e.getMessage());
        }
    }
}



import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.*;
import org.springframework.beans.factory.annotation.Autowired;
import jakarta.annotation.PostConstruct;

import java.io.File;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;

@Configuration
public class FallbackConfigLoader {

    @Autowired
    private ConfigurableEnvironment environment;

    private final File fallbackFile = new File("config-fallback.json");

    @PostConstruct
    public void loadFallbackPropertiesIfNeeded() {
        if (isDatabaseUnavailable()) {
            try (FileReader reader = new FileReader(fallbackFile)) {
                Map<String, Object> fallbackProps = new ObjectMapper().readValue(reader, HashMap.class);
                MapPropertySource fallbackSource = new MapPropertySource("fallback", fallbackProps);
                environment.getPropertySources().addFirst(fallbackSource);
                System.out.println("✅ Fallback config loaded at startup.");
            } catch (Exception e) {
                System.err.println("❌ Could not load fallback config: " + e.getMessage());
            }
        }
    }

    private boolean isDatabaseUnavailable() {
        // Basic check (use real health check or JDBC ping if needed)
        try {
            // Replace with your real DB check logic or bean status
            return false; // Simulate false for now
        } catch (Exception e) {
            return true;
        }
    }
}
